--@name 2024 Cam Controller and Hud
--@author Merydian9
--@shared
--@model models/jaanus/wiretool/wiretool_range.mdl

if SERVER then
    -- Global variable initialization
    local HITPOS = Vector()
    local HITNORMAL = Vector()
    local INERTIA = Angle()
    local FILTER = {}
    local AIMHOLOGRAM = hologram.create(Vector(), Angle(), "models/sprops/cuboids/height06/size_1/cube_6x6x6.mdl", Vector())
    
    -- Wire port setup
    wire.adjustPorts({
        Active = "number", 
        Base = "entity", 
        Gun = "entity", 
        Gunsight = "entity", 
        Smokes = "entity"}, 
    {
        HitPos = "vector",
        HitNorm = "vector"
    })
    
    -- Ammo categorization
    ALLCRATES = find.byClass("acf_ammo")
    UNSORTEDAMMOTYPES = {}
    local ammoTypeArray = {}
    
    local count = table.count(ALLCRATES)
    for i = 1, count do
        local type = ALLCRATES[i]:acfCaliber() .. " " .. ALLCRATES[i]:acfName()
        
        if ALLCRATES[i]:getOwner() ~= owner() then continue end
        if string.explode(" ", type)[3] == "Refill" then continue end
        
        if UNSORTEDAMMOTYPES[type] == nil then
            UNSORTEDAMMOTYPES[type] = {Info = Vector(ALLCRATES[i]:acfMuzzleVel(), ALLCRATES[i]:acfPenetration(), 0)}
        end
        
        UNSORTEDAMMOTYPES[type][table.count(UNSORTEDAMMOTYPES[type])] = ALLCRATES[i]
    end
    
    SORTEDAMMOTYPES = {} // Sorts by caliber
    while table.count(UNSORTEDAMMOTYPES) > 0 do
        local keys = table.getKeys(UNSORTEDAMMOTYPES) 
        local maxValue = 99999 -- actually minValue
        local maxValueKey = ""
        
        for index = 1, table.count(keys) do
            local value = keys[index]
            local caliber = tonumber(string.explode(" ", value)[1])
            
            if caliber < maxValue then
                maxValue = caliber
                maxValueKey = value
            end
        end
        
        UNSORTEDAMMOTYPES[maxValueKey]["Name"] = maxValueKey
        table.insert(SORTEDAMMOTYPES, UNSORTEDAMMOTYPES[maxValueKey])  
        table.removeByValue(UNSORTEDAMMOTYPES, UNSORTEDAMMOTYPES[maxValueKey])
    end
    
    AMMOTYPES = SORTEDAMMOTYPES
    
    -- FILTER
    ALL = find.all()
    
    for i = 1, table.count(ALL) do
        local currentProp = ALL[i]
        if ALL[i]:getOwner() ~= owner() then continue end
        
        table.insert(FILTER, currentProp)
    end
    
    --print(table.count(AMMOTYPES) .. " ammo types found")
    --printTable(SORTEDAMMOTYPES)
    
    -- Exchange between CLIENT and SERVER
    -- Recieve CLIENT data and send SERVER initial data
    net.receive("requestGlobals", function(_, ply)
        -- Send SERVER data
        net.start("sendServerGlobals")
        net.writeBool(wire.ports.Active == 1)
        net.writeEntity(wire.ports.Base)
        net.writeEntity(wire.ports.Gunsight)
        net.writeEntity(wire.ports.Gun)
        net.writeTable(FILTER)
        net.writeEntity(AIMHOLOGRAM)
        net.writeTable(AMMOTYPES)
        net.writeString(tostring(wire.ports.Gun:acfCaliber()))
        net.send(ply, false)
    end)
    
    -- Send SERVER gun data
    timer.create("sendGunData",0.05,0,function()
        local Gun = wire.ports.Gun
        if Gun == nil then return end
        
        net.start("sendGunData")
        net.writeBool(Gun:acfReady())
        net.writeFloat(Gun:acfReloadTime())
        net.writeFloat(Gun:acfReloadProgress())
        if wire.ports.Smokes:isValid() then
            net.writeFloat(wire.ports.Smokes:acfReloadTime())
            net.writeFloat(wire.ports.Smokes:acfReloadProgress())
        else
            net.writeFloat(0)
            net.writeFloat(0)
        end
        net.writeString(Gun:acfState())
        net.writeString(Gun:acfAmmoType())
        
        for key, value in pairs(AMMOTYPES) do
            local totalAmmo = 0
            for i = 1, (table.count(value) - 1) do
                if value[i] == nil or !value[i]:isValid() then continue end
                totalAmmo = totalAmmo + value[i]:acfRounds()
            end
            value["Info"].z = totalAmmo
        end

        net.writeTable(AMMOTYPES)
        net.send(owner(), false)
        
    end)
    
    -- Send/update Input data
    hook.add ("input", "updateWire", function(INPUT, VALUE) 
        if INPUT == "Active" then
            net.start("sendActive")
            net.writeBool(wire.ports.Active == 1)
            net.send()
        end
    end)
    
    -- Recieve CLIENT wire data
    net.receive("sendClientData", function(_, ply)
        HITPOS = Vector(net.readFloat(), net.readFloat(), net.readFloat())
        HITNORMAL = Vector(net.readFloat(), net.readFloat(), net.readFloat())
        wire.ports.HitPos = HITPOS  
        wire.ports.HitNorm = HITNORMAL
    end)

    hook.add("tick", "updateHologram", function()
        local gun = wire.ports.Gun
        AIMHOLOGRAM:setPos(HITPOS)  
    end)
end


if CLIENT then
    -- Only run for the owner, saves usage
    if player() ~= owner() then return end
    
    -- Cam Settings
    local RELCAMPOS = Vector(0, 0, 100)
    local CAMDIST = 300
    local GUNSIGHTRELCAMPOS = Vector(0, 0, -2)
    local GUNSIGHTSHAPE = 2 -- 1 = Circle, 2 = Square
    
    -- CLIENT global variable initialization
    local FOV = 90
    local CAMPOS = Vector()
    local CAMANG = Angle()
    local HITPOS = Vector()
    local TRACEDIST = 0
    local AIMTRACE = nil
    local SPEED = 0
    local ZOOMMUL = 1
    local CAMPUSH = { fov = FOV, znear = 1, zfar = 80000 }
    
    -- Font and material initialization
    local MAINCOL = Color(255, 255, 255) -- Color of reticle
    local SECCOL = Color(255, 0, 0) -- Color of reticle details and text when not loaded
    local TERCOL = Color(255,191,0) -- Color of rest of the hud
    local FONTEXTRABIG = render.createFont("Roboto Mono", 40, 2, true, false, false, true)
    local FONTBIG = render.createFont("Roboto Mono", 30, 2, true, false, false, true)
    local FONTMED = render.createFont("Roboto Mono", 25, 2, true, false, false, true)
    local FONTSMALL = render.createFont("Roboto Mono", 20, 2, true, false, false, false)
    local CIRCMAT = render.createMaterial("egpextras/textures/tank/overlays/border_circular.png")
    local SQUAREMAT = render.createMaterial("egpextras/textures/tank/overlays/border_rectangular02.png")
    
    -- SERVER variable initilization
    local ACTIVE = false
    local BASE = chip()
    local GUNSIGHT = chip()
    local GUN = chip()
    local FILTER = {}
    local READY = false
    local CALIBER = ""
    local RELOADTIME = 0
    local RELOADPROGRESS = 0
    local SMRELOADTIME = 0
    local SMRELOADPROGRESS = 0
    local STATE = ""
    local AMMOTYPES = {}
    local CURRENTAMMOTYPE = ""
    local AIMHOLOGRAM = chip()
    
    -- These just re-route global commands
    local _drawSimpleText = render.drawSimpleText
    local _drawLine = render.drawLine
    local _drawCircle = render.drawCircle
    local _drawRect = render.drawRect
    local _drawRectOutline = render.drawRectOutline
    local _setColor = render.setColor
    local _drawPoly = render.drawPoly
    local _setFont = render.setFont
    local _traceline = trace.line
    
    -- Function initialization
    local function drawThickLine (x1, y1, x2, y2, thickness)
        local perpDir = Vector( y2 - y1, -( x2 - x1 ), 0 ):getNormalized() * thickness / 2
        local perpX = perpDir[1]
        local perpY = perpDir[2]
    
        _drawPoly( {
            { x = x1 + perpX, y = y1 + perpY },
            { x = x2 + perpX, y = y2 + perpY },
            { x = x2 - perpX, y = y2 - perpY },
            { x = x1 - perpX, y = y1 - perpY },
        } )
    end
    local function drawCenterRect(x, y, width, height)
        _drawRect(x - width / 2, y - height / 2, width, height)    
    end
    local function cleanFilter()
        for key, value in pairs(FILTER) do
            if value == nil or !value:isValid() then
                table.removeByValue(FILTER, value)
            end    
        end 
    end
    
    -- Render targets
    local fullReloadIndicator = "fullReloadIndicator"
    local centerChevron = "centerChevron"
    local gunsightOutline = "gunsightOutline"
    
    render.createRenderTarget(centerChevron)
    render.createRenderTarget(fullReloadIndicator)
    render.createRenderTarget(gunsightOutline)
    
    hook.add("renderoffscreen", "drawStatic", function()
         -- Variables
        local SCREENRESX, SCREENRESY = render.getResolution()
        local RESX, RESY = SCREENRESX / 2, SCREENRESY / 2
        
        hook.remove("renderoffscreen", "drawStatic") -- only call once
        
        render.selectRenderTarget( fullReloadIndicator )
        render.clear( Color( 0, 0, 0, 0 ) )
            local pi = 3.14159
            for i = 1, 32 do
                local theta = i * (pi / 16)
                local radX = math.cos(theta - pi / 2)
                local radY = math.sin(theta - pi / 2)
                drawThickLine(RESX + radX * 50, RESY + radY * 50, RESX + radX * 55, RESY + radY * 55, 1.5)  
            end

        render.selectRenderTarget(centerChevron)
        render.clear( Color( 0, 0, 0, 0 ) )
            _setColor(Color(0, 0, 0))
            drawThickLine(RESX + 10, RESY + 20, RESX, RESY, 6)
            drawThickLine(RESX - 10, RESY + 20, RESX, RESY, 6)
            _setColor(MAINCOL)
            drawThickLine(RESX + 10, RESY + 20, RESX, RESY, 2)
            drawThickLine(RESX - 10, RESY + 20, RESX, RESY, 2)
            
        render.selectRenderTarget(gunsightOutline)
        render.clear( Color( 0, 0, 0, 0 ) )
            if GUNSIGHTSHAPE == 1 then
                render.setMaterial(CIRCMAT)
                local SIZE = 512
                render.drawTexturedRect(RESX - SIZE / 2, RESY - SIZE / 2, SIZE, SIZE)
                _setColor(Color(255, 100, 0, 10))
                render.drawCircle(RESX, RESY, 67)
                render.drawCircle(RESX, RESY, 68)
                render.drawCircle(RESX, RESY, 69)
            else
                render.setMaterial(SQUAREMAT)
                local SIZE = 256
                render.drawTexturedRect(RESX - SIZE / 2, RESY - SIZE / 2, SIZE, SIZE)
                _setColor(Color(255, 100, 0, 10))
                local XSIZE = 140 * (SIZE / 256)
                local YSIZE = 107.5 * (SIZE / 256)
                render.drawRectOutline(RESX - XSIZE / 2, RESY - YSIZE / 2, XSIZE, YSIZE, 2)  
            end
    end )
    
    -- Runs if you move the mouse
    hook.add('mousemoved', 'MouseMoved', function(x, y)
        if ACTIVE == 0 then return end
        
        CAMANG.pitch = math.clamp(CAMANG.pitch + (y / 40), -89, 89)
        CAMANG.yaw   = CAMANG.yaw - (x / 40)
    end)

    -- Runs if you scroll the mouse    
    hook.add('mouseWheeled', 'MouseWheeled', function(delta)
        if not ACTIVE then return end
        cleanFilter()
        
        local currentCamPos = CAMPOS
        local newCamPos = CAMPOS
        local currentAimPos = HITPOS
        local newAimPos = HITPOS
        local angDiff = Angle()
        
        local currentFOV = FOV
        -- Zooming and moving camera to stay on target when you do
        if (delta > 0) then
            if currentFOV == 90  then
                newCamPos = GUNSIGHT:getPos() + GUNSIGHT:getForward() * GUNSIGHTRELCAMPOS.x + GUNSIGHT:getRight() * GUNSIGHTRELCAMPOS.y + GUNSIGHT:getUp() * GUNSIGHTRELCAMPOS.z
                newAimPos = _traceline(newCamPos + CAMANG:getForward():getNormalized() * 1000, newCamPos + CAMANG:getForward():getNormalized() * 80000, FILTER)["HitPos"]
                
                angDiff = (newAimPos - newCamPos):getNormalized():getAngle() - (currentAimPos - newCamPos):getNormalized():getAngle()
                angDiff.pitch = angDiff.pitch % 90
            end
            
            FOV = math.clamp(FOV / 2, 2.8125, 90)
        else
            FOV = math.clamp(FOV * 2, 2.8125, 90)
            
            if currentFOV ~= 90 and FOV == 90 then
                local aimVector = (CAMANG:getForward():getNormalized() * 25) + (CAMANG:getUp():getNormalized() * 5) -- Where the position starts
                local aimNormal = aimVector:getNormalized() -- This is for the angle

                newCamPos = BASE:getPos() + RELCAMPOS - CAMANG:getForward() * CAMDIST
                newAimPos = _traceline(newCamPos + aimNormal * 1000, newCamPos + aimNormal * 80000, FILTER)["HitPos"]
                
                angDiff = (newAimPos - newCamPos):getNormalized():getAngle() - (currentAimPos - newCamPos):getNormalized():getAngle()
                angDiff.pitch = angDiff.pitch % -90
            end    
        end
        
        CAMANG = CAMANG - angDiff
        ZOOMMUL = FOV / 90
        CAMPUSH["fov"] = FOV
    end)

    -- Does the calculations for the camera
    hook.add('calcview', 'CameraView', function(pos, ang, fov, znear, zfar)  
        if not ACTIVE then return end
        cleanFilter()
        
        CAMPOS = BASE:getPos() + RELCAMPOS - CAMANG:getForward() * CAMDIST -- this will give you distance around a point
        if ZOOMMUL ~= 1 then
            CAMPOS = GUNSIGHT:getPos() + GUNSIGHT:getForward() * GUNSIGHTRELCAMPOS.x + GUNSIGHT:getRight() * GUNSIGHTRELCAMPOS.y + GUNSIGHT:getUp() * GUNSIGHTRELCAMPOS.z
        end
        
        -- These are the calculations for the HITPOS
        local upMul = (ZOOMMUL == 1) and 1 or 0 -- If we are in third person, use this campos, otherwise use center of screen
        local aimVector = (CAMANG:getForward():getNormalized() * 25) + (CAMANG:getUp():getNormalized() * 5) * upMul -- Where the position starts
        local aimNormal = aimVector:getNormalized() -- This is for the angle
        
        for key, value in pairs(FILTER) do
            if value == nil or !value:isValid() then
                table.removeByValue(FILTER, value)
            end    
        end 

        AIMTRACE  = _traceline(CAMPOS + aimNormal * 100, CAMPOS + aimNormal * 80000, FILTER) -- Trace to where we want to aim
        HITPOS = AIMTRACE["HitPos"]

        net.start("sendClientData")
        net.writeFloat(HITPOS.x)
        net.writeFloat(HITPOS.y)
        net.writeFloat(HITPOS.z)
        net.writeFloat(aimNormal.x)
        net.writeFloat(aimNormal.y)
        net.writeFloat(aimNormal.z)
        net.send(nil, true)  
        
        CAMPUSH["origin"] = CAMPOS
        CAMPUSH["angles"] = CAMANG
        
        return CAMPUSH
    end)
    
    -- Only update these variables every 0.1 seconds for readability
    timer.create("", 0.1, 0, function()
        if AIMTRACE == nil then return end
        
        TRACEDIST = AIMTRACE["Fraction"] * 80000 -- Updating Trace Distance
        
        local velocity = math.round(BASE:getVelocity():getLength() * 1 / 17.6, 1)
        SPEED = velocity % 1 > 0 and math.round(velocity, 1) or velocity .. ".0" -- Updating Speed
    end)
        
    -- Draw the hud
    hook.add('drawhud', 'TankHud', function()
        -- if not ACTIVE then return end
        cleanFilter()
        
        -- Variables
        local SCREENRESX, SCREENRESY = render.getResolution()
        local RESX, RESY = SCREENRESX / 2, SCREENRESY / 2
    
        -- Crosshair
        local crosshair = HITPOS:toScreen()
        local x,y = crosshair.x, crosshair.y
        if crosshair.visible then    
            -- Center chevron
            _setColor(Color(255, 255, 255))
            render.setRenderTargetTexture(centerChevron)
            local size = 1024
            render.drawTexturedRect(x - size / 2, y - size / 2, size, size)
            render.setRenderTargetTexture()
            
            -- Color
            local color = TERCOL
            if READY ~= true then color = SECCOL end
            _setColor(color)
            
            -- Lines        
            -- drawThickLine(x + 75, y, x + 250, y, 2)
            -- drawThickLine(x - 75, y, x - 250, y, 2)
            --drawThickLine(x - 101, y, x - 101, y + 15, 2)
            --drawThickLine(x + 101, y, x + 101, y + 15, 2)
            
            drawThickLine(x, y + 65, x, y + 85, 1)
            drawThickLine(x, y + 95, x, y + 120, 1)
            drawThickLine(x, y + 130, x, y + 155, 1)
            
            -- Reload Indicator
            if RELOADPROGRESS ~= 1 then
                local pi = 3.14159
                for i = 1, math.round(32 * RELOADPROGRESS) do
                    local theta = i * (pi / 16)
                    local radX = math.cos(theta - pi / 2)
                    local radY = math.sin(theta - pi / 2)
                    _drawLine(x + radX * 50, y + radY * 50, x + radX * 55, y + radY * 55)  
                end
            end
            
            -- Text
            _setFont(FONTBIG)
            _drawSimpleText(x + 60, y + 20, STATE, 0, 1) -- Gun Status
            _drawSimpleText(x - 60, y + 20, math.round(TRACEDIST * 1/176) .. "m", 2, 1) -- Distance
            
            _setFont(FONTMED)
            local reloadLeft = (RELOADPROGRESS < 1) and RELOADTIME - (RELOADTIME * RELOADPROGRESS) or (RELOADTIME)
            _drawSimpleText(x + 60, y + 45, math.round(reloadLeft, 2) .. "s", 0, 1) -- Reload Progress
            
        end
        
        -- Holosight
        if (AIMHOLOGRAM:isValid() and AIMHOLOGRAND ~= chip()) then
            local circle = AIMHOLOGRAM:getPos():toScreen()
            local x, y = circle.x, circle.y
            if circle.visible then
                -- Circle
                _setColor(Color(0, 0, 0))
                _drawCircle(x, y, 5, 5)
                _drawCircle(x, y, 5.5, 5.5)
                _setColor(TERCOL)
                _drawCircle(x, y, 4, 4)
            end
        end
        
        -- Gun reticle
        local gunTrace = _traceline(GUN:getPos() + GUN:getForward():getNormalized() * 350, GUN:getPos() + GUN:getForward():getNormalized() * 80000, FILTER) -- Trace to where we want to aim
        local gunRet = gunTrace["HitPos"]:toScreen()
        local x,y = gunRet.x, gunRet.y
        if gunRet.visible then    
            -- Color
            local color = TERCOL
            if READY ~= true then color = SECCOL end
            
            -- Circle
            _setColor(Color(0, 0, 0))
            _drawCircle(x, y, 11, 11)
            _drawCircle(x, y, 11.5, 11.5)
            _setColor(color)
            _drawCircle(x, y, 10, 10)
            
            -- Center chevron
            _setColor(Color(255, 255, 255))
            render.setRenderTargetTexture(centerChevron)
            local size = 1024
            render.drawTexturedRectFast(x - size / 2, y - size / 2, size, size)
            render.setRenderTargetTexture()
       end
    
        -- Gunsight Outline (unused)
        /*
        if true then
            local POSCOORDS = (GUNSIGHT:getPos() + -GUNSIGHT:getUp() * 200):toScreen()
            local RX, RY = POSCOORDS.x, POSCOORDS.y
            
            render.setRenderTargetTexture(gunsightOutline)
            local SIZE = SCREENRESX * (2 / ZOOMMUL) * 2
            render.drawTexturedRectFast(RX - SIZE / 2, RY - SIZE / 2, SIZE, SIZE)
            _setColor(Color(0, 0, 0))
        end 
        */
    
        -- Main Hud    
        _setColor(TERCOL)
        
        -- Outline Lines
        if ZOOMMUL ~= 1 then
            drawThickLine(RESX + 550, RESY + 300, RESX + 600, RESY + 300, 2)
            drawThickLine(RESX + 600, RESY + 300, RESX + 600, RESY + 275, 2)
            drawThickLine(RESX - 550, RESY + 300, RESX - 600, RESY + 300, 2)
            drawThickLine(RESX - 600, RESY + 300, RESX - 600, RESY + 275, 2)
            
            drawThickLine(RESX - 550, RESY - 300, RESX - 600, RESY - 300, 2)
            drawThickLine(RESX - 600, RESY - 300, RESX - 600, RESY - 275, 2)
            drawThickLine(RESX + 550, RESY - 300, RESX + 600, RESY - 300, 2)
            drawThickLine(RESX + 600, RESY - 300, RESX + 600, RESY - 275, 2)
        end
    
        -- Side Icons
        _setColor(Color(0, 0, 0))
        drawCenterRect(RESX - 480, RESY + 15, 12, 12)
        drawCenterRect(RESX + 480, RESY + 15, 12, 12)
        _setColor(TERCOL)
        drawCenterRect(RESX - 480, RESY + 15, 9, 9)
        drawCenterRect(RESX + 480, RESY + 15, 9, 9)
        
        -- Side Values
        _setFont(FONTBIG)
        _drawSimpleText(RESX - 500, RESY, SPEED, 2, 1) -- Speed
        local zoomAmount = (90 / FOV) % 1 > 0 and math.round((90 / FOV), 1) or (90 / FOV) .. ".0"
        _drawSimpleText(RESX + 500, RESY, "x" .. zoomAmount, 0, 1) -- Zoom
        
        -- Side Labels
        _setFont(FONTSMALL)
        _drawSimpleText(RESX - 500, RESY + 25, "KM/H", 2, 1)
        _drawSimpleText(RESX + 500, RESY + 25, "ZOOM", 0, 1)
        
        
        -- Bottom Boxes
        local count = table.count(AMMOTYPES)
        local smCount = 0
        for i = 1, (count) do -- Main box
            local currentAmmoString = string.explode(" ", AMMOTYPES[i]["Name"])
            if currentAmmoString[3] == "SM" then -- ignore smoke
                smCount = smCount + 1
            end
        end
        
        local HEIGHT, WIDTH, DISTANCE = 150, 125, 10
        local SX, SY = RESX + (WIDTH + DISTANCE) * (count + 1 - smCount) / 2, SCREENRESY - HEIGHT / 2 - DISTANCE
        local ignoreI = 0
        
        -- Ammo text boxes
        for i = 1, (count) do -- Main box
            local currentAmmoString = string.explode(" ", AMMOTYPES[i]["Name"])
            local currentAmmoInfo = AMMOTYPES[i]["Info"]
            if currentAmmoString[3] == "SM" then
                ignoreI = ignoreI + 1
                local color = TERCOL
                if SMRELOADPROGRESS ~= 1 then color = SECCOL end
                _setColor(color)
                _setFont(FONTEXTRABIG)
                _drawSimpleText(RESX + 500, RESY + 200, "x" .. currentAmmoInfo.z, 2, 1) -- smoke ammo count
                _setFont(FONTSMALL) -- smoke test
                _drawSimpleText(RESX + 510, RESY + 210, "SMOKES", 0, 1) -- smoke label text
                local reloadLeft = (SMRELOADPROGRESS < 1) and SMRELOADTIME - (SMRELOADTIME * SMRELOADPROGRESS) or (SMRELOADTIME)
                 _drawSimpleText(RESX + 510, RESY + 190, math.round(reloadLeft, 2) .. "s", 0, 1)  -- smoke reload time
                continue
            elseif currentAmmoString[3] == CURRENTAMMOTYPE and currentAmmoString[1] == CALIBER then
                local color = TERCOL
                if RELOADPROGRESS ~= 1 then color = SECCOL end
                _setColor(color)
                _setFont(FONTEXTRABIG)
                _drawSimpleText(RESX - 500, RESY + 200, "x" .. currentAmmoInfo.z, 0, 1) -- smoke ammo count
                _setFont(FONTSMALL) -- smoke test
                _drawSimpleText(RESX - 510, RESY + 210, CALIBER .. "MM " .. CURRENTAMMOTYPE, 2, 1) -- smoke label text
                local reloadLeft = (RELOADPROGRESS < 1) and RELOADTIME - (RELOADTIME * RELOADPROGRESS) or (RELOADTIME)
                 _drawSimpleText(RESX - 510, RESY + 190, math.round(reloadLeft, 2) .. "s", 2, 1)  -- smoke reload time
            end
            
            local index = (i - ignoreI)
            local POSX = SX - index * (WIDTH + DISTANCE)
            
            -- Backing
            _setColor(Color(0, 0, 0, 150))
            _drawRect(POSX - WIDTH / 2, SY - HEIGHT / 2, WIDTH, HEIGHT, 3)
            
            -- Shapes
            _setColor(TERCOL)
            if CALIBER == currentAmmoString[1] and CURRENTAMMOTYPE ~= currentAmmoString[3] then _setColor(Color(0, 0, 0)) end
            _drawRectOutline(POSX - WIDTH / 2, SY - HEIGHT / 2, WIDTH, HEIGHT, 3)
            
            -- Texts
            _setFont(FONTMED) -- Big font text
            _setColor(TERCOL)
            if tonumber(currentAmmoString[2][1]) == nil then -- if its not a normal weapon then use
                _drawSimpleText(POSX, SY - 50, currentAmmoString[2], 1, 1) -- weapon name
            else -- otherwise use
                _drawSimpleText(POSX, SY - 50, currentAmmoString[1] .. " " .. currentAmmoString[3], 1, 1) -- ammo type     
            end
            _setFont(FONTMED) -- Medium font text
            _drawSimpleText(POSX, SY - 25, math.round(currentAmmoInfo.x) .. " m/s", 1, 1) -- ammo speed
            _drawSimpleText(POSX, SY, math.round(currentAmmoInfo.y) .. " mm", 1, 1) -- ammo penetration
            _setFont(FONTEXTRABIG) -- Extra big font text
            _drawSimpleText(POSX, SY + 40, currentAmmoInfo.z, 1, 1) -- ammo count
            
            -- Outline
            _setColor(Color(0, 0, 0))
            _drawRectOutline(SX - WIDTH / 2 - index * (WIDTH + DISTANCE), SY - HEIGHT / 2, WIDTH, HEIGHT, 2)
        end
    end) 
    
    -- Exchange between CLIENT and SERVER
    -- Request SERVER data
    net.start("requestGlobals")
    net.send() 
    
    -- Recieve wire inputs, happens when updated
    net.receive("sendActive", function() ACTIVE = net.readBool() end)
    
    -- Recieve SERVER globals, happens once
    net.receive("sendServerGlobals", function()
        ACTIVE = net.readBool()
  
        BASE = net.readEntity()
        GUNSIGHT = net.readEntity()
        GUN = net.readEntity()
        FILTER = net.readTable()
        
        AIMHOLOGRAM = net.readEntity()
        
        AMMOTYPES = net.readTable()
        
        CALIBER = net.readString()
    end) 

    -- Recieve SERVER gun data, happens every 0.05s
    net.receive("sendGunData", function()
        READY = net.readBool() -- Gun Ready
        POSSIBLERELOADTIME = net.readFloat()
        RELOADPROGRESS = net.readFloat()

        SMRELOADTIME = net.readFloat()
        SMRELOADPROGRESS = net.readFloat()

        STATE = net.readString()  
        CURRENTAMMOTYPE = net.readString()
        
        AMMOTYPES = net.readTable()
        
        
        if READY then
            RELOADTIME = POSSIBLERELOADTIME    
        end
    end)
end